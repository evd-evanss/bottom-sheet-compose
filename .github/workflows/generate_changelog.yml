name: Generate Changelog and Update PR Body

on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  generate_and_update_pr:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get PR changes
        id: get_pr_diff
        run: |
          BASE_SHA=${{ github.event.pull_request.base.sha }}
          HEAD_SHA=${{ github.event.pull_request.head.sha }}

          echo "Base SHA: $BASE_SHA"
          echo "Head SHA: $HEAD_SHA"

          DIFF_OUTPUT=$(git diff $BASE_SHA $HEAD_SHA)

          MAX_DIFF_LENGTH=12000
          TRUNCATED_DIFF=$(echo "$DIFF_OUTPUT" | head -c $MAX_DIFF_LENGTH)
          
          JSON_SAFE_DIFF=$(echo "$TRUNCATED_DIFF" | sed 's/\\/\\\\/g' | sed 's/"/\\"/g' | sed ':a;N;$!ba;s/\n/\\n/g')

          echo "diff_output_json_safe<<EOF" >> $GITHUB_OUTPUT
          echo "$JSON_SAFE_DIFF" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
        shell: bash

      - name: Call Gemini API
        id: call_gemini
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
          COMMIT_DIFF: ${{ steps.get_pr_diff.outputs.diff_output_json_safe }}
        run: |
          PROMPT="Gere um breve descritivo em português para as seguintes alterações de código (diff) de um Pull Request.
          Este descritivo será inserido na seção '## Descrição' de um template de Pull Request.
          Foque nos principais impactos e funcionalidades adicionadas ou corrigidas.
          Seja conciso e use bullet points se apropriado. Não inclua saudações ou frases introdutórias desnecessárias, apenas os itens do changelog.
          Diff:
          $COMMIT_DIFF"

          JSON_PAYLOAD=$(cat <<EOF
          {
            "contents": [{
              "parts": [{
                "text": "$PROMPT"
              }]
            }],
            "generationConfig": {
              "temperature": 0.7,
              "maxOutputTokens": 250
            }
          }
          EOF
          )

          API_URL="https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash-latest:generateContent?key=$GEMINI_API_KEY"
          
          RESPONSE=$(curl -s -X POST "$API_URL" \
            -H "Content-Type: application/json" \
            -d "$JSON_PAYLOAD")

          echo "Gemini API Response: $RESPONSE"
          
          GENERATED_TEXT=$(echo "$RESPONSE" | jq -r '.candidates[0].content.parts[0].text // ""')

          if [ -z "$GENERATED_TEXT" ] && ! echo "$RESPONSE" | jq -e '.candidates[0].content.parts[0].text' > /dev/null; then
            ERROR_MESSAGE=$(echo "$RESPONSE" | jq -r '.error.message // "Erro desconhecido ao gerar changelog ou texto vazio retornado."')
            echo "::warning file=$0,line=$LINENO::Falha ao gerar texto com Gemini. Resposta: $RESPONSE. Mensagem de erro: $ERROR_MESSAGE"
            GENERATED_TEXT="Falha ao gerar resumo das alterações pela IA."
          fi
          
          TRIMMED_GENERATED_TEXT=$(echo "$GENERATED_TEXT" | sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//')

          echo "generated_text<<EOF" >> $GITHUB_OUTPUT
          echo "$TRIMMED_GENERATED_TEXT" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
        shell: bash

      - name: Update PR Body
        uses: actions/github-script@v7
        env: # Passando a saída do passo anterior como variável de ambiente
          GENERATED_CHANGELOG_FROM_API: ${{ steps.call_gemini.outputs.generated_text }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const core = require('@actions/core'); // Importar core para setFailed
            const generatedChangelogRaw = process.env.GENERATED_CHANGELOG_FROM_API || "";
            const generatedChangelog = generatedChangelogRaw.trim();
            const fallbackErrorMessage = "Falha ao gerar resumo das alterações pela IA.";

            if (!generatedChangelog || generatedChangelog === fallbackErrorMessage) {
              console.log("Nenhum changelog significativo gerado ou ocorreu um erro. Não atualizando o PR.");
              return; 
            }

            const prNumber = context.issue.number;
            const { data: pr } = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: prNumber,
            });

            let currentBody = pr.body || "";
            const descriptionMarker = "## Descrição";
            const generatedChangelogHeader = "\n\n**Resumo das Alterações (Gerado por IA):**\n";
            const fullGeneratedContent = generatedChangelogHeader + generatedChangelog;

            const aiContentMarkerStart = "<!-- AI_GENERATED_CHANGELOG_START -->";
            const aiContentMarkerEnd = "<!-- AI_GENERATED_CHANGELOG_END -->";
            
            let newBody;

            const startIndex = currentBody.indexOf(aiContentMarkerStart);
            const endIndex = currentBody.indexOf(aiContentMarkerEnd);

            if (startIndex !== -1 && endIndex !== -1 && startIndex < endIndex) {
              newBody = currentBody.substring(0, startIndex) + 
                        aiContentMarkerStart + "\n" + fullGeneratedContent + "\n" + aiContentMarkerEnd + 
                        currentBody.substring(endIndex + aiContentMarkerEnd.length);
              console.log("Substituindo changelog gerado por IA existente.");
            } else {
              const descriptionIndex = currentBody.indexOf(descriptionMarker);
              if (descriptionIndex !== -1) {
                const insertPosition = descriptionIndex + descriptionMarker.length;
                newBody = currentBody.substring(0, insertPosition) +
                          "\n" + aiContentMarkerStart + "\n" + fullGeneratedContent + "\n" + aiContentMarkerEnd +
                          currentBody.substring(insertPosition);
                console.log("Inserindo novo changelog gerado por IA abaixo de '## Descrição'.");
              } else {
                console.warn(`Marcador '${descriptionMarker}' não encontrado no corpo do PR. Adicionando changelog no início.`);
                newBody = aiContentMarkerStart + "\n" + fullGeneratedContent + "\n" + aiContentMarkerEnd + "\n\n" + currentBody;
              }
            }

            if (newBody !== currentBody) {
              try {
                await github.rest.pulls.update({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  pull_number: prNumber,
                  body: newBody,
                });
                console.log("Corpo do PR atualizado com sucesso.");
              } catch (error) {
                console.error("Erro ao atualizar o corpo do PR:", error);
                core.setFailed(`Erro ao atualizar o corpo do PR: ${error.message}`);
              }
            } else {
              console.log("Nenhuma alteração necessária no corpo do PR.");
            }